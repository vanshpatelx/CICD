name: Deploy EKS Automated usign Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (apply/destroy)'
        required: true
        default: 'apply'
      cluster_name:
        description: 'Name of the EKS Cluster'
        required: true
        default: 'my-cluster'
      job:
        description: 'Specify job to run (terraform/argocd/all)'
        required: true
        default: 'all'

jobs:
  terraform:
    if: github.event.inputs.job == 'terraform' || github.event.inputs.job == 'all'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init
        working-directory: ToDo-App

      - name: Terraform Plan
        run: terraform plan -var="cluster_name=${{ github.event.inputs.cluster_name }}"
        working-directory: ToDo-App

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply --auto-approve -var="cluster_name=${{ github.event.inputs.cluster_name }}"
        working-directory: ToDo-App

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy --auto-approve -var="cluster_name=${{ github.event.inputs.cluster_name }}"
        working-directory: ToDo-App

  argocd:
    if: github.event.inputs.job == 'argocd' || github.event.inputs.job == 'all'
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Configure kubectl
        run: aws eks update-kubeconfig --region $AWS_REGION --name ${{ github.event.inputs.cluster_name }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Deploy ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/core-install.yaml
          kubectl get pods -n argocd

      - name: Expose ArgoCD Server
        run: |
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          sleep 60  # Wait for LoadBalancer provisioning
          export ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname')
          export ARGO_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ArgoCD is accessible at: http://$ARGOCD_SERVER"
          echo "ArgoCD Admin Password: $ARGO_PWD"
